.\" Text automatically generated by txt2man
.TH bruteforce-salted-openssl 1 "May 2019" "bruteforced-salted-openssl-1.4.2" "bruteforce files encrypted with OpenSSL"
.SH NAME
\fBbruteforce-salted-openssl \fP- try to find the passphrase for files encrypted with OpenSSL
\fB
.SH SYNOPSIS
.nf
.fam C
\fBbruteforce-salted-openssl\fP [\fIoptions\fP] <filename>

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBbruteforce-salted-openssl\fP tries to find the passphrase or password of a file that was
encrypted with the openssl command. It can be used in two ways:
.RS
.IP \(bu 3
Try all the possible passwords given a charset.
.IP \(bu 3
Try all the passwords in a file (dictionary).
.RE
.PP
\fBbruteforce-salted-openssl\fP has the following features:
.RS
.IP \(bu 3
You can specify the number of threads to use when cracking a file.
.IP \(bu 3
The program should be able to use all the digests and symmetric ciphers available
with the OpenSSL libraries installed on your system.
.IP \(bu 3
Sending a USR1 signal to a running \fBbruteforce-salted-openssl\fP process makes it print
progress and continue.
.IP \(bu 3
There are an exhaustive mode and a dictionary mode.
.RE
.PP
In the exhaustive mode the program tries to decrypt the file by trying all possible
passwords. It is especially useful if you know something about the password (i.e. you
forgot a part of your password but still remember most of it). Finding the password of
the file without knowing anything about it would take way too much time (unless the
password is really short and/or weak). There are some command line \fIoptions\fP to specify:
.RS
.IP \(bu 3
The minimum password length to try.
.IP \(bu 3
The maximum password length to try.
.IP \(bu 3
The beginning of the password.
.IP \(bu 3
The end of the password.
.IP \(bu 3
The character set to use (among the characters of the current locale).
.RE
.PP
In dictionary mode the program tries to decrypt the file by trying all the passwords
contained in a file. The file must have one password per line.
.SH OPTIONS
.TP
.B
\fB-1\fP
Stop the program after finding the first password candidate.
.TP
.B
\fB-a\fP
List the available cipher and digest algorithms.
.TP
.B
\fB-B\fP <file>
Search using binary passwords (instead of character passwords).
Write candidates to <file>.
.TP
.B
\fB-b\fP <string>
Beginning of the password. The default value is "".
.TP
.B
\fB-c\fP <cipher>
Cipher for decryption. The default value is aes-256-cbc.
.TP
.B
\fB-d\fP <digest>
Digest for key and initialization vector generation. Default: md5.
.TP
.B
\fB-e\fP <string>
End of the password. Default: "".
.TP
.B
\fB-f\fP <file>
Read the passwords from a file instead of generating them.
.TP
.B
\fB-h\fP
Show help and quit.
.TP
.B
\fB-L\fP <n>
Limit the maximum number of tested passwords to <n>.
.TP
.B
\fB-l\fP <length>
Minimum password length (beginning and end included). Default: 1.
.TP
.B
\fB-M\fP <string>
Consider the decryption as successful when the data starts with <string>.
Without this option, the decryption is considered as successful when the
data contains mostly printable ASCII characters (at least 90%).
.TP
.B
\fB-m\fP <length>
Maximum password length (beginning and end included). Default: 8.
.TP
.B
\fB-N\fP
Ignore decryption errors (similar to openssl \fB-nopad\fP).
.TP
.B
\fB-n\fP
Ignore salt (similar to openssl \fB-nosalt\fP).
.TP
.B
\fB-p\fP <n>
Preview and check the first <n> decrypted bytes for the magic string.
If the magic string is present, try decrypting the rest of the data.
Default: 1024.
.TP
.B
\fB-s\fP <string>
Password character set. Default value is "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
.TP
.B
\fB-t\fP <n>
Number of threads to use. Default: 1.
.TP
.B
\fB-v\fP <n>
Print progress info every n seconds.
.TP
.B
\fB-w\fP <file>
Restore the state of a previous session if the file exists,
then write the state to the file regularly (~ every minute).
.PP
Note: Sending a USR1 signal to a running \fBbruteforce-salted-openssl\fP process makes it print
progress info to standard error and continue.
.SH LIMITATIONS
The program considers decrypted data as correct if it is mainly composed of printable
ASCII characters (at least 90%). If the file you want to decrypt doesn't contain plain
text, you will have to either use the \fB-M\fP option, or modify the 'valid_data' function
in the source code to match your needs.
.PP
If the file you want to decrypt is big, you should use the \fB-N\fP option on a truncated
version of the file (to avoid decrypting the whole file with each password).
.SH EXAMPLES
Try to find the password of an aes256 encrypted file using 4 threads, trying only
passwords with 5 characters:
.PP
.nf
.fam C
    $ bruteforce-salted-openssl -t 4 -l 5 -m 5 -c aes256 encrypted.file

.fam T
.fi
Try to find the password of a des3 encrypted file using 8 threads, trying only passwords
with 9 to 11 characters, beginning with "AbCD", ending with "Ef", and containing only letters:
.PP
.nf
.fam C
    $ bruteforce-salted-openssl -t 8 -l 9 -m 11 -c des3 -b "AbCD" -e "Ef" -s "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" encrypted.file

.fam T
.fi
Try to find the password of an aes256 encrypted file using 6 threads, trying the passwords contained in a dictionary file:
.PP
.nf
.fam C
    $ bruteforce-salted-openssl -t 6 -f dictionary.txt -c aes256 encrypted-file

.fam T
.fi
Print progress info every 30 seconds:
.PP
.nf
.fam C
    $ bruteforce-salted-openssl -t 6 -f dictionary.txt -c aes256 -v 30 encrypted-file

.fam T
.fi
Try to find the password of a des3 encrypted gzip file using 8 threads:
.PP
.nf
.fam C
    $ bruteforce-salted-openssl -t 8 -v 5 -c des3 -m 9 -s "0123456789" -M "$(echo -ne '\\x1f\\x8b')" file.tar.gz.des3

.fam T
.fi
Save/restore state between sessions:
.PP
.nf
.fam C
    $ bruteforce-salted-openssl -t 6 -f dictionary.txt -c aes256 -w state.txt encrypted-file
      (Let the program run for a few minutes and stop it)
    $ bruteforce-salted-openssl -t 6 -c aes256 -w state.txt encrypted-file

.fam T
.fi
Show the list of available algorithms:
.PP
.nf
.fam C
    $ bruteforce-salted-openssl -a

.fam T
.fi
If the program finds a candidate password 'pwd', you can decrypt the data using the 'openssl' command:
.PP
.nf
.fam C
    $ openssl enc -d -aes256 -salt -in encrypted.file -out decrypted.file -k pwd

.fam T
.fi
.SH AUTHOR
\fBbruteforce-salted-openssl\fP was written by Guillaume LE VAILLANT. For contact, use the email <glv@posteo.net>
or go to https://github.com/glv2/\fBbruteforce-salted-openssl\fP.
.PP
This manual page was written by Joao Eriberto Mota Filho <eriberto@debian.org> for the Debian project (but may be used by others).
